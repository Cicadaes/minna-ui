// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`build-component compiles a Svelte component package 1`] = `
"/* component.html generated by Svelte */

function reversed({ name }) {
	return name.split('').reverse().join('');
}

function data() {
	return {
  name: 'Elon Musk',
};
}

function create_main_fragment(component_1, ctx) {
	var div, a, text_1, div_1, text_2, text_3, text_5, div_2, text_6, span, text_7;

	return {
		c() {
			div = createElement(\\"div\\");
			a = createElement(\\"a\\");
			a.innerHTML = \\"<img src=\\\\\\"#\\\\\\">\\";
			text_1 = createText(\\"  \\");
			div_1 = createElement(\\"div\\");
			text_2 = createText(\\"test \\");
			text_3 = createText(ctx.name);
			text_5 = createText(\\" \\");
			div_2 = createElement(\\"div\\");
			text_6 = createText(\\"test \\");
			span = createElement(\\"span\\");
			text_7 = createText(ctx.reversed);
			a.href = \\"\\";
			div_1.className = \\"text svelte-4rsr1p\\";
			div_2.className = \\"text svelte-4rsr1p\\";
			div.className = \\"wrapper svelte-4rsr1p\\";
		},

		m(target, anchor) {
			insertNode(div, target, anchor);
			appendNode(a, div);
			appendNode(text_1, div);
			appendNode(div_1, div);
			appendNode(text_2, div_1);
			appendNode(text_3, div_1);
			component_1.refs.target = div_1;
			appendNode(text_5, div);
			appendNode(div_2, div);
			appendNode(text_6, div_2);
			appendNode(span, div_2);
			appendNode(text_7, span);
			component_1.refs.reversed = div_2;
		},

		p(changed, ctx) {
			if (changed.name) {
				text_3.data = ctx.name;
			}

			if (changed.reversed) {
				text_7.data = ctx.reversed;
			}
		},

		d(detach) {
			if (detach) {
				detachNode(div);
			}

			if (component_1.refs.target === div_1) component_1.refs.target = null;
			if (component_1.refs.reversed === div_2) component_1.refs.reversed = null;
		}
	};
}

function component(options) {
	init(this, options);
	this.refs = {};
	this._state = assign(data(), options.data);
	this._recompute({ name: 1 }, this._state);
	this._intro = true;

	this._fragment = create_main_fragment(this, this._state);

	if (options.target) {
		this._fragment.c();
		this._mount(options.target, options.anchor);
	}
}

assign(component.prototype, {
 	destroy: destroy,
 	get: get,
 	fire: fire,
 	on: on,
 	set: set,
 	_set: _set,
 	_mount: _mount,
 	_differs: _differs
 });

component.prototype._recompute = function _recompute(changed, state) {
	if (changed.name) {
		if (this._differs(state.reversed, (state.reversed = reversed(state)))) changed.reversed = true;
	}
}

function createElement(name) {
	return document.createElement(name);
}

function createText(data) {
	return document.createTextNode(data);
}

function insertNode(node, target, anchor) {
	target.insertBefore(node, anchor);
}

function appendNode(node, target) {
	target.appendChild(node);
}

function detachNode(node) {
	node.parentNode.removeChild(node);
}

function init(component, options) {
	component._handlers = blankObject();
	component._bind = options._bind;

	component.options = options;
	component.root = options.root || component;
	component.store = component.root.store || options.store;
}

function assign(tar, src) {
	for (var k in src) tar[k] = src[k];
	return tar;
}

function destroy(detach) {
	this.destroy = noop;
	this.fire('destroy');
	this.set = noop;

	this._fragment.d(detach !== false);
	this._fragment = null;
	this._state = {};
}

function get() {
	return this._state;
}

function fire(eventName, data) {
	var handlers =
		eventName in this._handlers && this._handlers[eventName].slice();
	if (!handlers) return;

	for (var i = 0; i < handlers.length; i += 1) {
		var handler = handlers[i];

		if (!handler.__calling) {
			handler.__calling = true;
			handler.call(this, data);
			handler.__calling = false;
		}
	}
}

function on(eventName, handler) {
	var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
	handlers.push(handler);

	return {
		cancel: function() {
			var index = handlers.indexOf(handler);
			if (~index) handlers.splice(index, 1);
		}
	};
}

function set(newState) {
	this._set(assign({}, newState));
	if (this.root._lock) return;
	this.root._lock = true;
	callAll(this.root._beforecreate);
	callAll(this.root._oncreate);
	callAll(this.root._aftercreate);
	this.root._lock = false;
}

function _set(newState) {
	var oldState = this._state,
		changed = {},
		dirty = false;

	for (var key in newState) {
		if (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;
	}
	if (!dirty) return;

	this._state = assign(assign({}, oldState), newState);
	this._recompute(changed, this._state);
	if (this._bind) this._bind(changed, this._state);

	if (this._fragment) {
		this.fire(\\"state\\", { changed: changed, current: this._state, previous: oldState });
		this._fragment.p(changed, this._state);
		this.fire(\\"update\\", { changed: changed, current: this._state, previous: oldState });
	}
}

function _mount(target, anchor) {
	this._fragment[this._fragment.i ? 'i' : 'm'](target, anchor || null);
}

function _differs(a, b) {
	return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}

function blankObject() {
	return Object.create(null);
}

function noop() {}

function callAll(fns) {
	while (fns && fns.length) fns.shift()();
}
export default component;"
`;

exports[`build-component compiles a Svelte component package 2`] = `
"/* component.html generated by Svelte */
var component = (function() { \\"use strict\\";

	function reversed({ name }) {
		return name.split('').reverse().join('');
	}

	function data() {
		return {
  name: 'Elon Musk',
};
	}

	function create_main_fragment(component_1, ctx) {
		var div, a, text_1, div_1, text_2, text_3, text_5, div_2, text_6, span, text_7;

		return {
			c() {
				div = createElement(\\"div\\");
				a = createElement(\\"a\\");
				a.innerHTML = \\"<img src=\\\\\\"#\\\\\\">\\";
				text_1 = createText(\\"  \\");
				div_1 = createElement(\\"div\\");
				text_2 = createText(\\"test \\");
				text_3 = createText(ctx.name);
				text_5 = createText(\\" \\");
				div_2 = createElement(\\"div\\");
				text_6 = createText(\\"test \\");
				span = createElement(\\"span\\");
				text_7 = createText(ctx.reversed);
				a.href = \\"\\";
				div_1.className = \\"text svelte-4rsr1p\\";
				div_2.className = \\"text svelte-4rsr1p\\";
				div.className = \\"wrapper svelte-4rsr1p\\";
			},

			m(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(a, div);
				appendNode(text_1, div);
				appendNode(div_1, div);
				appendNode(text_2, div_1);
				appendNode(text_3, div_1);
				component_1.refs.target = div_1;
				appendNode(text_5, div);
				appendNode(div_2, div);
				appendNode(text_6, div_2);
				appendNode(span, div_2);
				appendNode(text_7, span);
				component_1.refs.reversed = div_2;
			},

			p(changed, ctx) {
				if (changed.name) {
					text_3.data = ctx.name;
				}

				if (changed.reversed) {
					text_7.data = ctx.reversed;
				}
			},

			d(detach) {
				if (detach) {
					detachNode(div);
				}

				if (component_1.refs.target === div_1) component_1.refs.target = null;
				if (component_1.refs.reversed === div_2) component_1.refs.reversed = null;
			}
		};
	}

	function component(options) {
		init(this, options);
		this.refs = {};
		this._state = assign(data(), options.data);
		this._recompute({ name: 1 }, this._state);
		this._intro = true;

		this._fragment = create_main_fragment(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(component.prototype, {
	 	destroy: destroy,
	 	get: get,
	 	fire: fire,
	 	on: on,
	 	set: set,
	 	_set: _set,
	 	_mount: _mount,
	 	_differs: _differs
	 });

	component.prototype._recompute = function _recompute(changed, state) {
		if (changed.name) {
			if (this._differs(state.reversed, (state.reversed = reversed(state)))) changed.reversed = true;
		}
	}

	function createElement(name) {
		return document.createElement(name);
	}

	function createText(data) {
		return document.createTextNode(data);
	}

	function insertNode(node, target, anchor) {
		target.insertBefore(node, anchor);
	}

	function appendNode(node, target) {
		target.appendChild(node);
	}

	function detachNode(node) {
		node.parentNode.removeChild(node);
	}

	function init(component, options) {
		component._handlers = blankObject();
		component._bind = options._bind;

		component.options = options;
		component.root = options.root || component;
		component.store = component.root.store || options.store;
	}

	function assign(tar, src) {
		for (var k in src) tar[k] = src[k];
		return tar;
	}

	function destroy(detach) {
		this.destroy = noop;
		this.fire('destroy');
		this.set = noop;

		this._fragment.d(detach !== false);
		this._fragment = null;
		this._state = {};
	}

	function get() {
		return this._state;
	}

	function fire(eventName, data) {
		var handlers =
			eventName in this._handlers && this._handlers[eventName].slice();
		if (!handlers) return;

		for (var i = 0; i < handlers.length; i += 1) {
			var handler = handlers[i];

			if (!handler.__calling) {
				handler.__calling = true;
				handler.call(this, data);
				handler.__calling = false;
			}
		}
	}

	function on(eventName, handler) {
		var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
		handlers.push(handler);

		return {
			cancel: function() {
				var index = handlers.indexOf(handler);
				if (~index) handlers.splice(index, 1);
			}
		};
	}

	function set(newState) {
		this._set(assign({}, newState));
		if (this.root._lock) return;
		this.root._lock = true;
		callAll(this.root._beforecreate);
		callAll(this.root._oncreate);
		callAll(this.root._aftercreate);
		this.root._lock = false;
	}

	function _set(newState) {
		var oldState = this._state,
			changed = {},
			dirty = false;

		for (var key in newState) {
			if (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;
		}
		if (!dirty) return;

		this._state = assign(assign({}, oldState), newState);
		this._recompute(changed, this._state);
		if (this._bind) this._bind(changed, this._state);

		if (this._fragment) {
			this.fire(\\"state\\", { changed: changed, current: this._state, previous: oldState });
			this._fragment.p(changed, this._state);
			this.fire(\\"update\\", { changed: changed, current: this._state, previous: oldState });
		}
	}

	function _mount(target, anchor) {
		this._fragment[this._fragment.i ? 'i' : 'm'](target, anchor || null);
	}

	function _differs(a, b) {
		return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
	}

	function blankObject() {
		return Object.create(null);
	}

	function noop() {}

	function callAll(fns) {
		while (fns && fns.length) fns.shift()();
	}
	return component;
}());"
`;

exports[`build-component compiles a Svelte component package 3`] = `":root{--body-margin:0}.text.svelte-4rsr1p{color:hsl(0, 100%, 50%)}.text.svelte-4rsr1p:focus{background:hsl(0, 0%, 0%)}.wrapper.svelte-4rsr1p>.text.svelte-4rsr1p{margin-top:1rem}@media screen and (min-width: 30em){body{margin:var(--body-margin) }}"`;
